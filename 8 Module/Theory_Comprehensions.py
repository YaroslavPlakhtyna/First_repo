#Comprehensions
#Часто потрібно створити колекцію і відразу заповнити її елементами. Зробити це одним виразом не можна, 
#доводиться писати цикл. Наприклад, створимо список квадратів чисел від 1 до 5:
sq = []
for i in range(1, 5+1):
    sq.append(i**2)

print(sq)   # [1, 4, 9, 16, 25]

#Подібні операції, які ми робимо зі змінюваними колекціями (list, dict, set) у циклі for,
# ми можемо виконати одним виразом за допомогою конструкції comprehension.

#comprehensions — це синтаксична конструкція Python, створена спеціально, щоб зменшити кількість коду, 
# коли потрібно для кожної ітерації циклу for додати один елемент у нову колекцію.

#Суть синтаксису comprehensions: всередині дужок (для list — квадратні, для dict та set — круглі) 
# записується вираз (тільки один), який потрібно виконати з кожним елементом циклу for та сам цикл, 
# але без двокрапки у кінці.

#Найпростіше зрозуміти цю конструкцію на прикладах.
#Щоб записати до списку числа від 1 до 5 за допомогою comprehensions:
numbers = [i for i in range(1, 5+1)]

#Попередній приклад із квадратами чисел від 1 до 5 можна переписати за допомогою comprehension:
sq = [i ** 2 for i in range(1, 5+1)]

# Для множин ситуація абсолютно аналогічна. Збережімо множини квадратів чисел зі списку:
numbers = [1, 4, 1, 3, 2, 5, 2, 6]
sq = {i ** 2 for i in numbers}
print(sq)   # {1, 4, 36, 9, 16, 25}

#Для словників синтаксис comprehension трохи відрізняється, оскільки потрібно явно вказати ключ та значення:
numbers = [1, 4, 1, 3, 2, 5, 2, 6]
sq = {i: i ** 2 for i in numbers}
print(sq)   # {1: 1, 4: 16, 3: 9, 2: 4, 5: 25, 6: 36}

#В цьому прикладі ми записали в словник sq числа від 1 до 5 у якості ключів, а їх квадрати як значення. 
# Основна відмінність за синтаксисом — це двокрапка між ключем і значенням в лівій частині виразу всередині дужок.