"""
**–ó–∞–≤–¥–∞–Ω–Ω—è 1**
–ù–∞—Å—Ç–∞–≤ —á–∞—Å –æ–±'—î–¥–Ω–∞—Ç–∏ –Ω–∞—à—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –æ–¥–Ω–µ.

–î–æ–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–æ –∫–ª–∞—Å—ñ–≤:

–î–æ–¥–∞–º–æ –ø–æ–ª–µ –¥–ª—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è - –∫–ª–∞—Å Birthday. –¶–µ –ø–æ–ª–µ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ.
–î–æ–¥–∞–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ä–æ–±–æ—Ç–∏ –∑ Birthday —É –∫–ª–∞—Å Record, –∞ —Å–∞–º–µ —Ñ—É–Ω–∫—Ü—ñ—é add_birthday, —è–∫–∞ –¥–æ–¥–∞—î –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.
–î–æ–¥–∞–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –ø–æ–ª—ñ–≤ Phone,Birthday.
–î–æ–¥–∞–º–æ –¥–æ –∫–ª–∞—Å—É AddressBook –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–µ—Ä—à–æ–≥–æ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è get_birthdays_per_week, —è–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, 
—è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ –ø–æ –¥–Ω—è—Ö –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ.
–¢–µ–ø–µ—Ä –≤–∞—à –±–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Å–∞–º–µ –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –∫–ª–∞—Å—É AddressBook –¶–µ –∑–Ω–∞—á–∏—Ç—å, —â–æ –∑–∞–º—ñ—Å—Ç—å —Å–ª–æ–≤–Ω–∏–∫–∞ contacts –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ book = AddressBook()

–î–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É —Ç–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:

add-birthday - –¥–æ–¥–∞—î–º–æ –¥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY
show-birthday - –ø–æ–∫–∞–∑—É—î–º–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
birthdays - –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ –ø–æ –¥–Ω—è—Ö –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ

–¢–æ–∂ –Ω–∞—à –±–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
add [—ñ–º'—è] [—Ç–µ–ª–µ—Ñ–æ–Ω]: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º–µ–Ω–µ–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º.
change [—ñ–º'—è] [–Ω–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω]: –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.
phone [—ñ–º'—è]: –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.
all: –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤ –∞–¥—Ä–µ—Å–Ω—ñ–π –∫–Ω–∏–∑—ñ.
add-birthday [—ñ–º'—è] [–¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è]: –î–æ–¥–∞—Ç–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.
show-birthday [—ñ–º'—è]: –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.
birthdays: –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —è–∫—ñ –≤—ñ–¥–±—É–¥—É—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è.
hello: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ—Ç–∞–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞.
close –∞–±–æ exit: –ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É.

–ö—Ä–∏—Ç–µ—Ä—ñ—ó –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:
–†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –≤–∫–∞–∑–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–æ –±–æ—Ç–∞
–í—Å—ñ –¥–∞–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–≤–æ–¥–∏—Ç–∏—Å—è —É –∑—Ä–æ–∑—É–º—ñ–ª–æ–º—É —Ç–∞ –∑—Ä—É—á–Ω–æ–º—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ñ–æ—Ä–º–∞—Ç—ñ
–í—Å—ñ –ø–æ–º–∏–ª–∫–∏, —Ç–∞–∫—ñ —è–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–≤—ñ–¥ —á–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É, –ø–æ–≤–∏–Ω–Ω—ñ –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è –≥–∞—Ä–Ω–æ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö:
–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY.
–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 10 —Ü–∏—Ñ—Ä.
–ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ close –∞–±–æ exit
–î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
üí°
–î–æ–¥–∞—Ç–∫–æ–≤–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ, –π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞ –≤–ª–∞—Å–Ω–∏–º –±–∞–∂–∞–Ω–Ω—è–º. –ú–µ–Ω—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è,
–∞–ª–µ –æ—Ü—ñ–Ω–∫—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏—à–µ –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ –Ω–∞–¥–∞–Ω–∏—Ö –≤–∏—â–µ –∫—Ä–∏—Ç–µ—Ä—ñ—è—Ö.

–ó–∞–≤–¥–∞–Ω–Ω—è
–î–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏ –Ω–∞ –¥–∏—Å–∫ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–∏—Å–∫–∞. 
–î–ª—è —Ü—å–æ–≥–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤–∞—Å –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó/–¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö —Ç–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—Ç—å –∑–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ó—Ö —ñ–∑ —Ñ–∞–π–ª—É. 
–ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞, —â–æ–± –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –Ω–µ –≤—Ç—Ä–∞—á–∞–≤ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É —ñ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥–Ω–æ–≤–ª—é–≤ —ó—Ö –∑ —Ñ–∞–π–ª—É.
"""
import pickle
import os
import datetime
from collections import UserDict, defaultdict

class CustomError(Exception):
    pass

class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field):
    pass


class Phone(Field):
    def __init__(self, value):
        super().__init__(value)
        self.__value = None
        self.value = value
    
    @property
    def value(self):
        return self.__value
    @value.setter
    def value(self, value):
        max_length = 10
        if len(value) == max_length and all([d.isdigit() for d in value]):
            self.__value = value 
        else:
            raise CustomError("Phone should be = 10 symbols")

class Birthday(Field):
    def __init__(self, value):
        super().__init__(value)
        self.__value = None
        self.value = value
    
    @property
    def value(self):
        return self.__value
    @value.setter
    def value(self, value):
        try:
            datetime.datetime.strptime(value, '%d.%m.%Y')
        except ValueError:
            raise CustomError("Incorrect data format, should be DD.MM.YYYY")
        today = datetime.datetime.today().date()
        birthday = datetime.datetime.strptime(value, '%d.%m.%Y').date()
        delta_date = (today - birthday).days
        delt_years = delta_date / 365
        if delt_years < 120 and today > birthday:
            self.__value = value
        else:
            raise CustomError("Birthday shoulde be less than 120 years and not in future")
    
class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.birthday = None
        self.phones = []
    
    def add_phone(self, phone):
        new_phone = Phone(value=phone)
        self.phones.append(new_phone)
    
    def edit_phone(self, old_phone, new_phone):
        for ph in self.phones:
            if ph.value == old_phone:
                ph.value = new_phone

    def remove_phone(self, phone):
        self.phones = [ph for ph in self.phones if ph.value != phone]

    def find_phone(self, phone):
        for ph in self.phones:
            if ph.value == phone:
                return ph
        return None
    
    def add_birthday(self, value):
        self.birthday = Birthday(value)
    
    def __repr__(self):
        tail = f"Birthday: {self.birthday}" if self.birthday else "" 
        return f"Contact name: {self.name.value}, Phones: {'; '.join(p.value for p in self.phones)} " + tail
    

class AddressBook(UserDict):
    
    def add_record(self, record: Record):
        self.data[record.name.value] = record
    
    def find(self, name):
        record = self.data.get(name)
        return record
    
    def delete(self, name):
        self.data.pop(name)

    def get_birthdays_per_week(self):
        contacts = defaultdict(list)
        today = datetime.datetime.today().date()
        for name, record in self.data.items():
            birthday = record.birthday.value
            if not birthday:
                continue
            birthday = datetime.datetime.strptime(birthday, '%d.%m.%Y').date()
            birthday_this_year = birthday.replace(year=today.year)
            if birthday_this_year < today:
                birthday_this_year = birthday_this_year.replace(year=today.year + 1)

            delta_days = (birthday_this_year - today).days
            if delta_days <= 7:
                birthday_weekday = (today + datetime.timedelta(days=delta_days)).strftime("%A")
                if birthday_weekday in ['Sunday','Saturday']:
                    birthday_weekday = 'Next Monday'
                contacts[birthday_weekday].append(name)
        info = ''
        tail = ''
        for k, value in contacts.items():
            if k == 'Next Monday':
                tail += f"{k}: {', '.join(value)}"
                continue
            info += f"{k}: {', '.join(value)}\n"
        info += tail 
        return info
    
    def save(self):
        file_name = "AddressBook.bin"
        with open(file_name, "wb") as fh:
            pickle.dump(self, fh)

    @classmethod    
    def load(cls):
        file_name = "AddressBook.bin"
        if os.path.exists(file_name):
            with open(file_name, "rb") as fh:
                self = pickle.load(fh)
            return self
        else:
            return AddressBook()

def input_error(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError:
            return "Give me name and phone (10 symbols) please."
        except IndexError:
            return "You should write 2 values"
        except KeyError:
            return "Contact not found, please add contact."
        except CustomError as error:
            return str(error)
    return inner

def parse_input(user_input):
    cmd, *args = user_input.split()
    cmd = cmd.strip().lower()
    return cmd, *args

@input_error
def add_contact(args, book: AddressBook):
    name, phone = args
    record = book.find(name)
    if not record:
        record = Record(name)
        record.add_phone(phone)
        book.add_record(record)
        book.save()
        return "Contact added."
    else:
        record.add_phone(phone)
        book.save()
        return "New phone added" 

@input_error
def change_contact(args, book: AddressBook):
    name = args[0]
    old_phone = args[1]
    new_phone = args[2]
    record = book.find(name)
    if not record:
        return "Contact not found"
    record.edit_phone(old_phone, new_phone)
    book.save()
    return "Contact changed"

@input_error
def show_contact(args, book: AddressBook):
    name = args[0]
    record = book.find(name)
    if not record:
        return "Contact not found"
    return record

def show_all_contact(book: AddressBook):
    info = ""
    for name, record in book.data.items():
        info += f'{record}\n'
    return info

@input_error
def add_birthday(args, book: AddressBook):
    name = args[0]
    birthday = args[1]
    record = book.find(name)
    if not record:
        return f'Contact {name} not found'
    record.add_birthday(birthday)
    book.save()
    return "Birthday was added"

@input_error
def show_birthday(args, book: AddressBook):
    name = args[0]
    record = book.find(name)
    if not record:
        return f'Contact {name} not found'
    birthday = record.birthday
    if not birthday:
        return f"Birthday was not added for contact {name}"
    return birthday

def show_all_birthday(book: AddressBook):
    info = ""
    for name, record in book.data.items():
        if not record.birthday:
            continue
        info += f'{name}: {record.birthday}\n'
    return info

def show_next_birthdays(book: AddressBook):
    if not book.get_birthdays_per_week():
        return "No any birthdays in near 1 week"
    else:
        return book.get_birthdays_per_week()

def main():
    book = AddressBook.load()
    print("Welcome to the assistant bot!")
    while True:
        user_input = input("Enter a command: ")
        command, *args = parse_input(user_input)
        if command in ["close", "exit"]:
            print("Good bye!")
            book.save()
            break

        elif command == "hello":
            print("How can I help you?")
        elif command == "add":
            print(add_contact(args, book))   
        elif command == "change":
            print(change_contact(args, book))
        elif command == "phone":
            print(show_contact(args, book))
        elif command == "all":
            print(show_all_contact(book))
        elif command == "add-birthday":
            print(add_birthday(args, book))
        elif command == "show-birthday":
            print(show_birthday(args, book))
        elif command == "birthdays":
            print(show_all_birthday(book))
        elif command == "next-birthdays":
            print(show_next_birthdays(book))
        else:
            print("Invalid command.")

if __name__ == "__main__":
    main()


